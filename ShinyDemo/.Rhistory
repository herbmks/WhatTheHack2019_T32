y_within_bounds <- y[bounds_filter]
x_polygon <- c(lower_bound, x_within_bounds, upper_bound)
y_polygon <- c(0, y_within_bounds, 0)
polygon(x_polygon, y_polygon, col = "red", probability_within_bounds <- pnorm(upper_bound, population_mean, sd) - pnorm(lower_bound, population_mean, population_sd)
population_mean <- 7.11
population_sd <-  0.1
sd_to_fill <- 2
lower_bound <- population_mean - population_sd * sd_to_fill
upper_bound <- population_mean + population_sd * sd_to_fill
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
y <- dnorm(x, population_mean, population_sd)
plot(x, y, type="n")
lines(x, y)
7 %% 3
7 %% 3
i <- rep(1,12,1)
i <- seq(1,12,1)
S[1]
S <- seq(1,12,1)
S[1]
S[0]
X <- c()
X[1] <- 28230396
U <- c()
S <- seq(1,12,1)
S[1]
X <- c()
X[1] <- 28230396
U <- c()
S <- seq(1,12,1)
S[1]
for(i in S){
X[i+1] <- (69069 * X[i] + 1) %% 2^(32)
U[i] <- X[i+1] / 2^32
}
X
U
j <- seq(4, 12, 1)
Par <- c()
Par <- c()
ParRel <- c()
J <- seq(4, 12, 1)
for(i in J){
Par[i-3] <- 900/((1-U[i])^(0.25)) - 900
}
Par
vec <- c(5,8,4.6,21)
vec
x <- rnorm(10)
x
test <- c(5 , 2 , 9 , 10)
sort(test)
rev(sort(test))
z <- order(x)
z
sort(x)
rev(sort(x))
y <- 1:8
x <- 20:1
z <- seq(from=-2, to=5, by =0.5)
u <- rep(2:5,2)
u
#logical vectors
x<- c(9,10,8,5,9)
y <- x<9
y
T+T
T-F
z <- c(1:3, NA)
z
ind <- is.na(z)
ind
x <- rbind(c(1:4), c(5:8))
x
dim(x)
dimnames(x)
attributes(x)
x <- cbind(c(1:4), c(5:8))
x
x <- matrix(1:8, nrow = 2, ncol = 4, byrow = FALSE)
x
dimnames(x) <- list(paste("row", 1:2), paste("col", LETTERS[1:4]))
x
paste("row", 1:2)
paste("col", LETTERS[1:4])
#calculation on matrices
x <- rbind(c(1:4), c(5:8))
y <- cbind(c(1:4), c(5:8))
x
y
x%*%y
x%*%t(x)
y1 <- 1:10
test1 <- c(1.5, .7, 45.6)
y1 <- 1:10
y2[y1>0]
y2 <- y1>0
y2 <- y1>5
sum(y2)
x <- 1:100
x <- seq(1, 100)
y <- seq(0, 500, by = 5)
z1 <- rep(, 50, 3)
z1 <- rep(, 50, rep = 3)
u <- rep(2:5,2)
u
z1 <- seq(rep(1, 3), rep(50, 3), by = 1)
z1 <- sort(rep(1:50, 3))
x + y
c(x, y)
for i in c(1:10){
z <- rep(i, i)
z2 <- sort(c(z2, z))
}
for( i in c(1:10)) {
z <- rep(i, i)
z2 <- sort(c(z2, z))
}
z2 <- c()
z2 <- c()
z <- c()
for( i in c(1:10)) {
z <- rep(i, i)
z2 <- sort(c(z2, z))
}
z2
z3 <- sort(c(seq(1, 49, by 2), rep(seq(2, 50, by = 2), 2)))
z3 <- sort(c(seq(1, 49, by = 2), rep(seq(2, 50, by = 2), 2)))
z3
mxval <- rnorm(100
mxval
x <- rnorm(100)
mat1 <- rnorm(100)
mat1
mat1 <- matrix(rnorm(100), nrow = 10, ncol = 10)
mat1
rowfirst <- 1:10
rowlast <- 10:1
mat1 <- cbind(rowfirst, mat1, rowlast)
mat1
newrowfirst <- 1:12
mat1 <- cbind(newrowfirst, mat1)
mat1 <- rbind(newrowfirst, mat1)
mat1 <- matrix(rnorm(100), nrow = 10, ncol = 10)
mat1
rowfirst <- 1:10
rowlast <- 10:1
mat1 <- rbind(rowfirst, mat1, rowlast)
mat1
newcolfirst <- 1:12
mat1 <- cbind(newcolfirst, mat1)
newcolfirst <- 1:12
newcolfirst
mat1 <- cbind(newcolfirst, mat1)
mat1
mat1 <- matrix(rnorm(100), nrow = 10, ncol = 10)
mat1
rowfirst <- 1:10
rowlast <- 10:1
mat1 <- rbind(rowfirst, mat1, rowlast)
mat1
newcolfirst <- 1:12
mat1 <- cbind(newcolfirst, mat1)
mat1
install.packages("reshape")
library(reshape)
tips
names(tips)
subset.data.frame(1:20, select = "tip", "sex", "day")
subset.data.frame(1:20, select = c("tip", "sex", "day"))
subset.data.frame(tips, 1:20, select = c(tip, sex day))
subset.data.frame(tips, 1:20, select = c(tip, sex, day))
subset.data.frame(tips, 1:20, select = c("tip", "sex", "day"))
subtips <- tips[1:20, 2:5]
subtips
subtips <- tips[1:20; 2:5]
subtips <- subtips[ , -3 ]
subtips
sub2tips <- subset(tips, tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex = MALE & tips$tip > 3, select = tip:sex)
sub2tips <- subset(tips, tips$sex = "MALE" & tips$tip > 3, select = tip:sex)
sub2tips <- subset(tips, tips$sex = "MALE", tips$tip > 3, select = tip:sex)
sub2tips <- subset(tips, tips$sex = c("MALE"), tips$tip > 3, select = tip:sex)
sub2tips <- subset(tips, tips$sex == c("MALE"), tips$tip > 3, select = tip:sex)
sub2tips <- subset(tips, tips$sex == c("MALE") & tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == "MALE" & tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == MALE & tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == 1 & tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == "MALE" | tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == "MALE" & tips$tip > 3, select = tip:sex)
sub2tips
sub2tips <- subset(tips, tips$sex == "Male" & tips$tip > 3, select = tip:sex)
sub2tips
sorttips <- orderBy(~tip, data = tips)
install.packages("doBy")
install.packages("doBy")
library(doBy)
sorttips <- orderBy(~tip, data = tips)
# Exercise 1
test1 <- c(1.5, .7, 45.6)
y1 <- 1:10
y2 <- y1>5
sum(y2)
# Exercise 2
x <- seq(1, 100)
y <- seq(0, 500, by = 5)
z1 <- sort(rep(1:50, 3))
z2 <- c()
z <- c()
for( i in c(1:10)) {
z <- rep(i, i)
z2 <- sort(c(z2, z))
}
z2
z3 <- sort(c(seq(1, 49, by = 2), rep(seq(2, 50, by = 2), 2)))
z3
# Exercise 3
mat1 <- matrix(rnorm(100), nrow = 10, ncol = 10)
mat1
rowfirst <- 1:10
rowlast <- 10:1
mat1 <- rbind(rowfirst, mat1, rowlast)
mat1
newcolfirst <- 1:12
mat1 <- cbind(newcolfirst, mat1)
mat1
# Exercise 4
library(reshape)
tips
names(tips)
subtips <- tips[1:20, 2:5]
subtips <- subtips[ , -3 ]
subtips
sub2tips <- subset(tips, tips$sex == "Male" & tips$tip > 3, select = tip:sex)
sub2tips
library(doBy)
sorttips <- orderBy(~tip, data = tips)
sortips
sorttips
sorttips <- orderBy(~-tip, data = tips)
sorttips
sorttips <- orderBy(~day-tip, data = tips)
sorttips
pythagoras() <- function(a, b){
sqrt(a^2+b^2)
}
pythagoras <- function(a, b){
sqrt(a^2+b^2)
}
pythagoras(1,1)
rooteqn <- function(a, b, c){
(-b+sqrt(b^2-4*ac))/(2a)
}
rooteqn <- function(a, b, c){
((-b+sqrt(b^2-4*ac))/(2a))
}
rooteqn <- function(a, b, c){
(-b+sqrt(b^2-4*a*c)) / (2*a)
}
rooteqn(-8, 6, 4)
rooteqn <- function(a, b, c){
c((-b+sqrt(b^2-4*a*c)) / (2*a), (b+sqrt(b^2-4*a*c)) / (2*a))
}
rooteqn(-8, 6, 4)
fun1 <- function(x){
if(x>0) print("Non-negative number")
else if(x<0) print("Negative number")
}
fun1(-9)
fun1(x)
x <- -13
fun1(x)
x <- 9
fun1(x)
fun1() <- function(x){
ifelse(x<0, "Negative number", "Non-negative number")
}
fun1 <- function(x){
ifelse(x<0, "Negative number", "Non-negative number")
}
x <- -13
fun1(x)
x <- 9
fun1(x)
tips
library(reshape)
tips
plot(tips$tip ~tips$total_bill)
plot(tips$tip ~tips$total_bill)
abline(lm(tips~total_bill, data = tips))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips)
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips))
abline(h=(sum(tips$tip)/length(tips$tip)))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips))
abline(h=(sum(tips$tip)/length(tips$tip)))
legend(x = "Bill", y = "Tip")
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips))
abline(h=(sum(tips$tip)/length(tips$tip)))
legend(x_label = "Bill", y_label = "Tip")
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips))
abline(h=(sum(tips$tip)/length(tips$tip)))
labels(x_label = "Bill", y_label = "Tip")
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
labels(x_label = "Bill", y_label = "Tip")
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
labels(x_label = "Bill", y_label = "Tip")
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(locator(1), c("REgression", "Mean"), lty = c(1,1), col=(3, 5))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(locator(1), c("REgression", "Mean"), lty = c(1,1), col = c(3, 5))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(locator(1), c("REgression", "Mean"), lty = c(1,1), col = c(3, 5))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(10,8, c("REgression", "Mean"), lty = c(1,1), col = c(3, 5))
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(10,8, c("REgression", "Mean"), lty = c(1,1), col = c(3, 5))
hist(tips$tip ~ tips$day)
hist(tips$tip ~ as.numeric(tips$day))
# Exercises 54 page 78
library(reshape)
tips
plot(tips$tip ~tips$total_bill)
abline(lm(tip~total_bill, data = tips), col = 3)
abline(h=(sum(tips$tip)/length(tips$tip)), col = 5)
legend(10,8, c("Regression", "Mean"), lty = c(1,1), col = c(3, 5))
hist(tips$tip ~ tips$day)
tips <- tips
View(tips)
tips$dayno <- c()
tips$dayno <- c()
for(i in 1:length(tips)){
if tips$day[i] == "Monday"
tips$dayno[i] = 1
else if tips$day[i] == "Tuesday"
tips$dayno[i] = 2
else if tips$day[i] == "Wednesday"
tips$dayno[i] = 3
else if tips$day[i] == "Thursday"
tips$dayno[i] = 4
else if tips$day[i] == "Friday"
tips$dayno[i] = 5
}
for(i in 1:length(tips)){
if tips$day[i] == "Monday"
tips$dayno[i] = 1
else if tips$day[i] == "Tuesday"
tips$dayno[i] = 2
else if tips$day[i] == "Wednesday"
tips$dayno[i] = 3
else if tips$day[i] == "Thursday"
tips$dayno[i] = 4
else if tips$day[i] == "Friday"
tips$dayno[i] = 5
}
tips$dayno <- c()
for(i in 1:length(tips))
if tips$day[i] == "Monday"
tips$dayno[i] = 1
else if tips$day[i] == "Tuesday"
tips$dayno[i] = 2
else if tips$day[i] == "Wednesday"
tips$dayno[i] = 3
else if tips$day[i] == "Thursday"
tips$dayno[i] = 4
else if tips$day[i] == "Friday"
tips$dayno[i] = 5
hist(tips$tip ~ tips$day, data = tips)
tips$dayno <- c()
View(tips)
tips$dayno <- NULL
View(tips)
tips$dayno <- 0
View(tips)
tips$dayno[tips$day == "Monday"] <- 1
tips$dayno <- 0
tips$dayno[tips$day == "Monday"] <- 1
tips$dayno[tips$day == "Tuesday"] <- 2
tips$dayno[tips$day == "Wednesday"] <- 3
tips$dayno[tips$day == "Thursday"] <- 4
tips$dayno[tips$day == "Friday"] <- 5
tips$dayno[tips$day == "Saturday"] <- 6
tips$dayno[tips$day == "Sunday"] <- 7
hist(tips$tip ~ tips$dayno, data = tips)
str(tips)
View(tips)
tips$dayno <- 0
tips$dayno[tips$day == "Monday"] <- 1
tips$dayno[tips$day == "Tuesday"] <- 2
tips$dayno[tips$day == "Wednesday"] <- 3
tips$dayno[tips$day == "Thur"] <- 4
tips$dayno[tips$day == "Fri"] <- 5
tips$dayno[tips$day == "Sat"] <- 6
tips$dayno[tips$day == "Sun"] <- 7
str(tips)
hist(tips$tip ~ tips$dayno, data = tips)
View(tips)
hist(tips$tip ~ tips$dayno, data = tips)
boxplot(tips$tip ~ tips$dayno, data = tips)
boxplot(tips$tip ~ tips$day, data = tips)
install.packages("SMPracticals")
data(cement)
library(SMPracticals)
data(cement)
head(cement)
mod <- lm(y ~ x1 + x2 + x3 + x4)
mod <- lm(y ~ x1 + x2 + x3 + x4, data = cement)
mod2 <- lm(y ~ x1 + x2, data = cement)
aov(mo1, mod2)
aov(mod1, mod2)
mod1 <- lm(y ~ x1 + x2 + x3 + x4, data = cement)
mod2 <- lm(y ~ x1 + x2, data = cement)
aov(mod1, mod2)
anova(mod1, mod2)
summary(mod1)
summary(mod2)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
qqnorm(mod2$residuals)
qqline(mod2$residuals)
plot(mod1)
plot(mod2)
plot(mod1$residuals)
abline(a = 2, b = 0)
plot(mod1$residuals/sd(mod1$residuals))
plot(mod1$residuals/sd(mod1$residuals))
abline(a = 2, b = 0, col = "red")
abline(a = -2, b = 0, col = "red")
# packages ------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(xtable)
library(forcats)
library(multcomp)
library(car)
library(DescTools)
anxiety <- read.csv("SocialAnxiety.csv")
anxiety <- anxiety[anxiety$sex != "",]
anxiety$sex <- droplevels(anxiety$sex)
levels(anxiety$group) <- c("dep", "healthy", "anxdep", "anx")
getwd()
setwd()
getwd()
setwd("Users/BHM/Documants/Degree_MSc/Year_1/Semester_1/Anova/ProjectAndSeminars")
setwd("Users/BHM/Documents/Degree_MSc/Year_1/Semester_1/Anova/ProjectAndSeminars")
getwd()
anxiety <- read.csv("SocialAnxiety.csv")
anxiety <- anxiety[anxiety$sex != "",]
anxiety$sex <- droplevels(anxiety$sex)
levels(anxiety$group) <- c("dep", "healthy", "anxdep", "anx")
setwd("Users/BHM/Documents/Degree_MSc/Year_1/Semester_1/Anova/ProjectAndSeminars")
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
install.packages("formattable")
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
install.packages("pheatmap")
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/Datathon-2019-Strike-Force-p-0.05/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
install.packages("DT")
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
install.packages("ggwordcloud")
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
install.packages("shinyBS")
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
shiny::runApp('Documents/Degree_MSc/Year_1/Semester_2/DATAthon/datathon2019/shiny app')
library(shiny); runApp('Documents/Degree_MSc/Year_1/Semester_2/WhatTheHack/WhatTheHack2019_T32/ShinyDemo/Demo.R')
